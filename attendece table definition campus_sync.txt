create table public.attendance (
  id serial not null,
  registration_no character varying(20) not null,
  subject_code character varying(10) not null,
  date date not null default CURRENT_DATE,
  period_number integer not null,
  is_present boolean not null default true,
  marked_at timestamp with time zone null default now(),
  marked_by uuid null,
  period integer null,
  department text null,
  semester integer null,
  section text null,
  constraint attendance_pkey primary key (id),
  constraint attendance_registration_no_subject_code_date_period_number_key unique (
    registration_no,
    subject_code,
    date,
    period_number
  ),
  constraint attendance_subject_code_fkey foreign KEY (subject_code) references subjects (subject_code) on delete CASCADE,
  constraint attendance_period_number_check check (
    (
      (period_number >= 1)
      and (period_number <= 6)
    )
  )
) TABLESPACE pg_default;

create unique INDEX IF not exists ux_attendance_reg_date_subject_period on public.attendance using btree (
  registration_no,
  date,
  subject_code,
  period_number
) TABLESPACE pg_default;

create index IF not exists idx_attendance_period_date on public.attendance using btree (date, period, department, semester, section) TABLESPACE pg_default;

create index IF not exists idx_attendance_reg_no on public.attendance using btree (registration_no) TABLESPACE pg_default;

create index IF not exists idx_attendance_subject_date on public.attendance using btree (subject_code, date) TABLESPACE pg_default;

create index IF not exists idx_attendance_date on public.attendance using btree (date) TABLESPACE pg_default;

create index IF not exists idx_attendance_period on public.attendance using btree (period_number) TABLESPACE pg_default;

create trigger trg_recompute_overall_attendance
after INSERT
or DELETE
or
update on attendance for EACH row
execute FUNCTION trg_recompute_overall_attendance ();
---------------------------------------------------------------------------------------------------------
create table public.attendance_backup (
  id uuid null,
  registration_no text null,
  date date null,
  status text null,
  marked_by uuid null,
  created_at timestamp without time zone null,
  percentage numeric(5, 2) null,
  total_classes integer null,
  attended_classes integer null
) TABLESPACE pg_default;

----------------------------------------------------------------------------------------------------------------
create table public.attendance_period_lock (
  id uuid not null default gen_random_uuid (),
  department text not null,
  semester integer not null,
  section text not null,
  date date not null,
  period integer not null,
  taken_by uuid null,
  taken_at timestamp with time zone not null default now(),
  constraint attendance_period_lock_pkey primary key (id),
  constraint attendance_period_lock_department_semester_section_date_per_key unique (department, semester, section, date, period)
) TABLESPACE pg_default;

create index IF not exists idx_lock_lookup on public.attendance_period_lock using btree (date, department, semester, section, period) TABLESPACE pg_default;
------------------------------------------------------------------------------------------------------------------------------------
create table public.attendance_summary (
  id serial not null,
  registration_no character varying(20) not null,
  subject_code character varying(10) not null,
  date date not null,
  total_periods integer null default 0,
  attended_periods integer null default 0,
  attendance_percentage numeric(5, 2) null default 0.00,
  last_updated timestamp with time zone null default now(),
  constraint attendance_summary_pkey primary key (id),
  constraint attendance_summary_registration_no_subject_code_date_key unique (registration_no, subject_code, date),
  constraint attendance_summary_subject_code_fkey foreign KEY (subject_code) references subjects (subject_code) on delete CASCADE
) TABLESPACE pg_default;

create unique INDEX IF not exists ux_attendance_summary_reg_subj_date on public.attendance_summary using btree (registration_no, subject_code, date) TABLESPACE pg_default;

create index IF not exists idx_attendance_summary_reg_no on public.attendance_summary using btree (registration_no) TABLESPACE pg_default;

create index IF not exists idx_attendance_summary_subject on public.attendance_summary using btree (subject_code) TABLESPACE pg_default;

create index IF not exists idx_attendance_summary_date on public.attendance_summary using btree (date) TABLESPACE pg_default;
--------------------------------------------------------------------------------------------------------------------------------------

create table public.daily_attendance (
  id integer generated by default as identity not null,
  registration_no character varying not null,
  date date not null default CURRENT_DATE,
  is_present boolean not null default true,
  marked_at timestamp with time zone null default now(),
  marked_by uuid null,
  constraint daily_attendance_pkey primary key (id),
  constraint daily_attendance_marked_by_fkey foreign KEY (marked_by) references auth.users (id),
  constraint fk_daily_attendance_student foreign KEY (registration_no) references students (registration_no)
) TABLESPACE pg_default;

create unique INDEX IF not exists ux_daily_attendance_reg_date on public.daily_attendance using btree (registration_no, date) TABLESPACE pg_default;
------------------------------------------------------------------------------------------------------------------------------------
create table public.overall_attendance_summary (
  id serial not null,
  registration_no character varying(20) not null,
  department character varying(50) not null,
  semester integer not null,
  section character varying(5) not null,
  total_periods integer null default 0,
  attended_periods integer null default 0,
  overall_percentage numeric(5, 2) null default 0.00,
  last_updated timestamp with time zone null default now(),
  constraint overall_attendance_summary_pkey primary key (id),
  constraint overall_attendance_summary_registration_no_key unique (registration_no)
) TABLESPACE pg_default;

create index IF not exists idx_overall_summary_reg_no on public.overall_attendance_summary using btree (registration_no) TABLESPACE pg_default;

create index IF not exists idx_overall_summary_dept_sem on public.overall_attendance_summary using btree (department, semester) TABLESPACE pg_default;
---------------------------------------------------------------------------------------------------------------------------------------------create view public.attendance_analytics as
select
  s.registration_no,
  s.registration_no as student_name,
  s.department,
  COALESCE(s.current_semester, s.semester) as semester,
  s.section,
  oas.total_periods,
  oas.attended_periods,
  oas.overall_percentage,
  case
    when oas.overall_percentage >= 75::numeric then 'Regular'::text
    when oas.overall_percentage >= 50::numeric then 'Irregular'::text
    else 'Poor'::text
  end as attendance_status,
  oas.last_updated
from
  students s
  left join overall_attendance_summary oas on s.registration_no = oas.registration_no::text;
----------------------------------------------------------------------------------------------------------------------

create view public.attendance_analytics_v2 as
select
  s.registration_no,
  COALESCE(u.name, s.student_name::text, s.registration_no) as student_name,
  o.total_periods,
  o.attended_periods,
  case
    when COALESCE(o.total_periods, 0) > 0 then round(
      o.attended_periods::numeric * 100.0 / o.total_periods::numeric,
      2
    )
    else 0::numeric
  end as percentage,
  s.department,
  s.semester
from
  overall_attendance_summary o
  join students s on s.registration_no = o.registration_no::text
  left join users u on u.id = s.user_id;	